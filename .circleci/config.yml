version: 2.1

# orbs:
#   slack: circleci/slack@4.12.0

defaults: &defaultsNode
  docker:
    - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migrations:
    description: Revert the last migration
    parameters:
        # workflow_id:
        #     type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7})
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi              
jobs:
  build-frontend:
    <<: *defaultsNode
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaultsNode
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            # npm login
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaultsNode
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test front end  
          command: |
            cd frontend
            npm install
            npm run test        
  test-backend:
    <<: *defaultsNode
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Test back end  
          command: |
            cd backend
            npm install
            npm run test   

  scan-frontend:
    <<: *defaultsNode
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan front end code for vulnerable software packages 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    <<: *defaultsNode
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Scan back end code for vulnerable software libraries 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix  --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --filter Name=tag:project,Values=udapeople \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  

  configure-infrastructure:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["90:9c:c7:26:ae:c4:b8:0a:65:25:d6:45:4c:26:92:85"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt install ansible -y
            apt install awscli -y
            which ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      - destroy-environment 

  run-migrations:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install awscli -y
            apt install nodejs -y
            apt install npm -y
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/QtqxphCCM9pydziqYoTsn8/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Install node and npm
          command: |
            yum remove nodejs  
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs 
            echo $(npm --version)   
      - attach_workspace:
          at: ~/      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filter Name=tag:project,Values=udapeople --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
      - revert-migrations  

  deploy-backend:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["90:9c:c7:26:ae:c4:b8:0a:65:25:d6:45:4c:26:92:85"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            tar --version
            gzip --version
            # apt install tar gzip -y
            # apt install ansible -y
            # apt install awscli -y
            apt install nodejs -y
            apt install npm -y
      - run:
          name: deploy backend
          command: |
            mkdir .circleci/ansible/roles/deploy/files
            ls -l .circleci/ansible/roles/deploy
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            ls -l .circleci/ansible/roles/deploy/files
            # echo "Contents  of the inventory.txt file is -------"
            # cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml
      # - destroy-environment 
      # - revert-migrations     

workflows:
  uda-people-workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend
          # requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
